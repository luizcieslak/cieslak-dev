---
import { type CollectionEntry, getCollection } from 'astro:content'
import BaseLayout from '../../../layouts/BaseLayout.astro'
import FormattedDate from '../../../components/FormattedDate.astro'
import PostPreview from '../../../components/PostPreview.astro'
import { sortItemsByDateDesc } from '../../../utils/data-utils'
import { getLangFromUrl, useTranslations } from '../../../i18n/utils'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

export async function getStaticPaths() {
	const posts = (await getCollection('blog')).sort(sortItemsByDateDesc)

	return posts.map((post, index) => {
		const [lang, ...slug] = post.slug.split('/')

		const prevPost = posts.find((post, i) => i < index && post.id.startsWith(lang))
		const nextPost = posts.find((post, i) => i > index && post.id.startsWith(lang))

		return {
			params: { slug: slug.join('/'), lang },
			props: {
				post,
				prevPost,
				nextPost,
			},
		}
	})
}

type Props = {
	post: CollectionEntry<'blog'>
	prevPost: CollectionEntry<'blog'>
	nextPost: CollectionEntry<'blog'>
}

const { post, prevPost, nextPost } = Astro.props
const { title, publishDate, updatedDate, excerpt, seo } = post.data
const { Content } = await post.render()
---

<BaseLayout
	title={seo?.title ?? title}
	description={seo?.description ?? excerpt}
	image={seo?.image}
	pageType='article'
>
	<article class='mb-16 sm:mb-24'>
		<header class='mb-8'>
			<h1 class='text-3xl leading-tight font-serif font-semibold sm:text-5xl sm:leading-tight'>{title}</h1>
			<div class='mt-4 text-sm'>
				<FormattedDate date={publishDate} />
				{
					updatedDate && (
						<>
							{' '}
							<span>
								({t('blog.updatedon')} <FormattedDate date={updatedDate} />)
							</span>
						</>
					)
				}
			</div>
		</header>
		<div class='max-w-none prose prose-dante sm:prose-lg blog-content-wrapper'>
			<Content />
		</div>
		<!-- <div class='mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base'>
			{
				tags.length > 0 && (
					<div class='flex flex-wrap gap-x-5 gap-y-1 text-sm'>
						{tags.map(tag => (
							<a class='text-main hover:underline' href={`/tags/${slugify(tag)}`}>
								#{tag}
							</a>
						))}
					</div>
				)
			}
			<Button
				class='copy-url-button'
				aria-label='Copy link'
				data-url={href}
				data-tooltip-default='Copy link'
				data-tooltip-success='Copied'
			>
				Share
			</Button>
		</div> -->
	</article>
	{
		(prevPost || nextPost) && (
			<div class='my-16 sm:my-24'>
				<h2 class='mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl'>Read Next</h2>
				{nextPost && <PostPreview post={nextPost} class='mb-10 sm:mb-12' headingLevel='h3' from='blog' />}
				{prevPost && <PostPreview post={prevPost} class='mb-10 sm:mb-12' headingLevel='h3' from='blog' />}
			</div>
		)
	}
</BaseLayout>

<script>
	document.addEventListener('astro:page-load', () => {
		const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement
		copyUrlButton?.addEventListener('click', async () => {
			await copyUrl(copyUrlButton)
		})

		async function copyUrl(button: HTMLButtonElement) {
			let url = button.getAttribute('data-url') || ''
			let label = button.innerText

			await navigator.clipboard.writeText(url)

			button.innerText = 'Copied'

			setTimeout(() => {
				button.innerText = label
			}, 2500)
		}
	})
</script>

<style>
	.blog-content-wrapper {
		video {
			width: 250px;
			margin: 0 auto;
		}

		.body-image {
			width: 250px;
			margin: 0 auto;
		}

		/* captions? */
		/* video + em,
		img + em {
			display: block;
			width: 250px;
			text-align: center;
			margin: 0 auto;
			font-size: 1em;
			text-wrap: balance;
		} */

		img {
			margin: 0 auto;
		}

		details[open] {
			background-color: var(--color-bg-muted);
			summary {
				font-weight: bold;
			}

			padding: 0 8px;
		}

		:where(p code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
			/* Remove the bold weight */
			font-weight: normal;
			/* Add background */
			background-color: #fff1e7;
			color: #e05f2d;
			padding: 0.2em 0.4em;
			border-radius: 4px;

			html.dark & {
				background-color: #2d1610;
				color: #ff8f5e;
			}

			/* Remove the backticks */
			&::before,
			&::after {
				display: none;
			}
		}
	}
</style>
